#include <stdio.h>
#include <stdbool.h>
#define rows 6
#define cols 7

void initialize(char board[rows][cols]) {
    for(int i = 0; i < rows; i++)
      for(int j = 0; j < cols; j++)
            board[i][j] = '.';
}

void print(char board[rows][cols]) {
    for(int i = 0; i < rows; i++) {
      for(int j = 0; j < cols; j++)
          printf("%c ", board[i][j]);
        printf("\n");
    }
        for(int j = 0; j < cols; j++)
        printf("%d ", j + 1);
    printf("\n\n");
}

bool update(char board[rows][cols], int col, char player) {
    if(col < 0 || col >= cols)
     return false;
    for(int i = rows - 1; i >= 0; i--) {
        if(board[i][col] == '.') {
          board[i][col] = player;
            return true;
        }
    }
    return false;
}

bool checkWin(char board[rows][cols], char player) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j <= cols - 4; j++) {
            if (board[i][j] == player &&
               board[i][j+1] == player &&
              board[i][j+2] == player &&
                board[i][j+3] == player) {
                return true;
            }
        }
    }

    for (int j = 0; j < cols; j++) {
        for (int i = 0; i <= rows - 4; i++) {
            if (board[i][j] == player &&
                board[i+1][j] == player &&
                board[i+2][j] == player &&
                board[i+3][j] == player) {
                return true;
            }
        }
    }

    for (int i = 3; i < rows; i++) {
        for (int j = 0; j <= cols - 4; j++) {
            if (board[i][j] == player &&
               board[i-1][j+1] == player &&
               board[i-2][j+2] == player &&
                board[i-3][j+3] == player) {
                return true;
            }
        }
    }

    for (int i = 0; i <= rows - 4; i++) {
        for (int j = 0; j <= cols - 4; j++) {
            if (board[i][j] == player &&
                 board[i+1][j+1] == player &&
               board[i+2][j+2] == player &&
                board[i+3][j+3] == player) {
                return true;
            }
        }
    }

    return false;
}

bool boardFull(char board[rows][cols]) {
    for (int j = 0; j < cols; j++) {
        if (board[0][j] == '.')
            return false;
    }
    return true;
}

int getColumn(int maxCols) {
    int col;
    while (1) {
        if (scanf("%d", &col) == 1) {
            if (col >= 1 && col <= maxCols) {
                return col - 1;
            } else {
                printf("Invalid column. Enter a number (1-%d): ", maxCols);
            }
        } else {
            while (getchar() != '\n');
            printf("Invalid input. Enter a number (1-%d): ", maxCols);
        }
    }
}

int main() {
    char A, B;
    printf("Welcome to Connect Four!\n");
    printf("Player A: ");
    scanf(" %c", &A);
    printf("Player B: ");
    scanf(" %c", &B);

    char player = A;
    char board[rows][cols];
    initialize(board);

    int col;

    while(true) {
        print(board);
        printf("Player %c, enter column (1-%d): ", player, cols);
        col = getColumn(cols);

        if(!update(board, col, player)) {
            printf("Invalid move. Try again.\n");
            continue;
        }

        if (checkWin(board, player)) {
            print(board);
            printf("Player %c wins!\n", player);
            break;
        }

        if (boardFull(board)) {
            print(board);
            printf("It's a draw!\n");
            break;
        }

        player = (player == A) ? B : A;
    }

    return 0;
}
